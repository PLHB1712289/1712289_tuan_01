{"version":3,"sources":["Resource/CONST.js","Components/Square/index.js","Components/Board/index.js","Components/Moves/index.js","Resource/FLAGSORT.js","Components/Game/service.js","Components/Game/index.js","index.js"],"names":["module","exports","MAX_SQUARE_IN_LINE","Square","value","onClick","isHighlight","style","backgroundColor","className","Board","squares","highlight","renderSquare","i","key","board","squareInLine","j","push","Moves","history","sortOption","current","onClickItem","historyTemp","slice","sort","a","b","location","listMoves","map","step","move","turn","_step","desc","calculateWinner","lines","isDraw","length","c","winner","Game","useState","Array","fill","setHistory","setHighlight","setCurrent","FLAGSORT","setSortOption","isXTurn","setIsXTurn","setWinner","status","setStatus","console","log","alert","squaresTemp","winPlayer","newHighlight","concat","handleClickSort","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0a4b2fa.chunk.js","sourcesContent":["const MAX_SQUARE_IN_LINE = 3;\n\nmodule.exports = { MAX_SQUARE_IN_LINE };\n","import React from \"react\";\nimport \"../../style.css\";\n\nconst Square = ({ value, onClick, isHighlight }) => {\n  return isHighlight ? (\n    <button\n      style={{ backgroundColor: \"green\" }}\n      className=\"square\"\n      onClick={() => onClick()}\n    >\n      {value}\n    </button>\n  ) : (\n    <button className=\"square\" onClick={() => onClick()}>\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport \"../../style.css\";\n\nimport Square from \"../Square\";\nimport { MAX_SQUARE_IN_LINE } from \"../../Resource/CONST\";\n\n// Component Board\n\nconst Board = ({ squares, onClick, highlight }) => {\n  // <Helper function>\n  // Helper 1: render square\n  const renderSquare = (i) => {\n    return (\n      <Square\n        key={i}\n        value={squares[i]}\n        onClick={() => onClick(i)}\n        isHighlight={highlight[i]}\n      />\n    );\n  };\n  // </Helper function>\n\n  // Helper render board\n  const board = [];\n  for (let i = 0; i < MAX_SQUARE_IN_LINE; i++) {\n    const squareInLine = [];\n    for (let j = 0; j < MAX_SQUARE_IN_LINE; j++) {\n      squareInLine.push(renderSquare(i * MAX_SQUARE_IN_LINE + j));\n    }\n\n    board.push(<div className=\"board-row\">{squareInLine}</div>);\n  }\n\n  return <div className=\"board\">{board}</div>;\n};\n\nexport default Board;\n","import React from \"react\";\n\n// Component Moves\n\nconst Moves = ({ history, sortOption, current, onClickItem }) => {\n  // Clone history\n  const historyTemp = history.slice();\n\n  // Sort history with sortOption [none, acending, decending]=[0, 1, -1]\n  historyTemp.sort((a, b) => {\n    if (a.location === -1 || b.location === -1) return 0;\n\n    if (a.location > b.location) return 1 * sortOption;\n\n    if (a.location < b.location) return -1 * sortOption;\n\n    return 0;\n  });\n\n  // create list items move\n  const listMoves = historyTemp.map((step, move) => {\n    const { location, turn } = step;\n    const _step = step.step;\n\n    const desc = move\n      ? `Go to move #${_step}, location: (${~~(location / 3) + 1}, ${\n          (location % 3) + 1\n        }), player: ${turn}`\n      : \"Go to game start\";\n\n    if (_step !== current) {\n      return (\n        <li key={_step}>\n          <button onClick={() => onClickItem(_step)}>{desc}</button>\n        </li>\n      );\n    } else {\n      return (\n        <li key={_step}>\n          <button\n            onClick={() => onClickItem(_step)}\n            style={{ backgroundColor: \"green\" }}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    }\n  });\n\n  // return result\n  return <ol> {listMoves} </ol>;\n};\n\nexport default Moves;\n","const DEFAULT = 0;\nconst ACENDING = 1;\nconst DECENDING = -1;\n\nexport default { DEFAULT, ACENDING, DECENDING };","// <function helper>\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  let isDraw = true;\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], lines: lines[i] };\n    }\n\n    isDraw = squares[a] && squares[b] && squares[c] && isDraw;\n  }\n\n  return isDraw;\n};\n// </function helper>\n\nexport default calculateWinner;\n","import React, { useState } from \"react\";\nimport \"../../style.css\";\nimport Board from \"../Board\";\nimport Moves from \"../Moves\";\n\nimport FLAGSORT from \"../../Resource/FLAGSORT\";\nimport calculateWinner from \"./service\";\n\n// Component Game\n\nconst Game = () => {\n  const [history, setHistory] = useState([\n    { squares: Array(9).fill(null), location: -1, turn: \"X\", step: 0 },\n  ]);\n  const [highlight, setHighlight] = useState(Array(9).fill(false));\n  const [current, setCurrent] = useState(0);\n  const [sortOption, setSortOption] = useState(FLAGSORT.DEFAULT);\n\n  const [isXTurn, setIsXTurn] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [status, setStatus] = useState(\"Next player: X\");\n\n  // <Helper function>\n\n  // Helper 1: Handle click square\n  const handleClick = (i) => {\n    console.log(`Current: ${current}`);\n    //check winner\n    if (winner) {\n      alert(\"Choose new game\");\n      return;\n    }\n\n    let historyTemp = [];\n    if (current !== history.length - 1) {\n      historyTemp = history.slice(0, current + 1);\n    } else {\n      historyTemp = history.slice();\n    }\n\n    //clone history & squares\n    const squaresTemp = historyTemp[current].squares.slice();\n\n    //change value state squares if possbile\n    if (!squaresTemp[i]) {\n      isXTurn ? (squaresTemp[i] = \"X\") : (squaresTemp[i] = \"O\");\n\n      //calculate winner\n      const winPlayer = calculateWinner(squaresTemp);\n\n      const newHighlight = Array(9).fill(false);\n      //update state isXTurn, history, winner, status\n      setIsXTurn(!isXTurn);\n      setHistory(\n        historyTemp.concat([\n          {\n            squares: squaresTemp,\n            location: i,\n            turn: isXTurn ? \"X\" : \"O\",\n            step: current + 1,\n          },\n        ])\n      );\n      setCurrent(historyTemp.length);\n      setWinner(winPlayer);\n      if (winPlayer) {\n        if (winPlayer !== true) {\n          setStatus(`Winner: ${winPlayer.winner}`);\n\n          newHighlight[winPlayer.lines[0]] = true;\n          newHighlight[winPlayer.lines[1]] = true;\n          newHighlight[winPlayer.lines[2]] = true;\n        } else {\n          setStatus(`Draw`);\n        }\n      } else {\n        setStatus(`Next player: ${isXTurn ? \"O\" : \"X\"}`);\n        newHighlight[i] = true;\n      }\n\n      setHighlight(newHighlight);\n    } else {\n      //alert error\n      alert(`Square ${i} already has a value!!`);\n    }\n  };\n\n  // Helper 2: create new game\n  const newGame = () => {\n    alert(`New Game?`);\n    setHistory([\n      { squares: Array(9).fill(null), location: -1, turn: \"X\", step: 0 },\n    ]);\n    setHighlight(Array(9).fill(false));\n    setIsXTurn(true);\n    setWinner(null);\n    setCurrent(0);\n    setStatus(\"Next player: X\");\n  };\n\n  // Helper 3: jump\n  const jumpTo = (move) => {\n    const newHighlight = Array(9).fill(false);\n    newHighlight[history[move].location] = true;\n    setHighlight(newHighlight);\n\n    setCurrent(move);\n    setIsXTurn(move % 2 === 0);\n    setStatus(`Next player: ${move % 2 === 0 ? \"X\" : \"O\"}`);\n  };\n\n  // Helper 4: handle click button sort\n  const handleClickSort = () => {\n    switch (sortOption) {\n      case FLAGSORT.DEFAULT:\n        setSortOption(FLAGSORT.ACENDING);\n        break;\n\n      case FLAGSORT.ACENDING:\n        setSortOption(FLAGSORT.DECENDING);\n        break;\n\n      case FLAGSORT.DECENDING:\n        setSortOption(FLAGSORT.DEFAULT);\n        break;\n\n      default:\n        break;\n    }\n  };\n  // </Helper function>\n\n  const sortTag = [\"DECENDING\", \"None\", \"ACENDING\"];\n  const colorSortTag = [\"green\", \"white\", \"yellow\"];\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          onClick={handleClick}\n          squares={history[current].squares}\n          highlight={highlight}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div className=\"status\">\n          <div>{status}</div>\n          <div>\n            <span>Sort:</span>\n            <button\n              style={{ backgroundColor: `${colorSortTag[sortOption + 1]}` }}\n              onClick={() => {\n                handleClickSort();\n              }}\n            >\n              {sortTag[sortOption + 1]}\n            </button>\n          </div>\n          <br />\n          <div>\n            {winner ? <button onClick={() => newGame()}>New Game</button> : \"\"}\n          </div>\n        </div>\n\n        <Moves\n          history={history}\n          sortOption={sortOption}\n          current={current}\n          onClickItem={jumpTo}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport Game from \"./Components/Game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}