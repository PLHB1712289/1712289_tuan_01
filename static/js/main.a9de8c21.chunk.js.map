{"version":3,"sources":["Resource/FLAGSORT.js","Components/Square.js","Components/Board.js","Components/Moves.js","Components/Game.js","App.js","index.js"],"names":["Square","value","onClick","isHighlight","style","backgroundColor","className","Board","squares","highlight","renderSquare","i","key","listSquares","push","Moves","history","sortOption","current","onClickItem","historyTemp","slice","sort","a","b","location","listMoves","map","step","move","turn","_step","desc","Game","useState","Array","fill","setHistory","setHighlight","setCurrent","FLAGSORT","setSortOption","isXTurn","setIsXTurn","winner","setWinner","status","setStatus","console","log","alert","squaresTemp","length","winPlayer","lines","isDraw","c","calculateWinner","newHighlight","concat","handleClickSort","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9de8c21.chunk.js","sourcesContent":["const DEFAULT = 0;\nconst ACENDING = 1;\nconst DECENDING = -1;\n\nexport default { DEFAULT, ACENDING, DECENDING };","import React from \"react\";\nimport \"../style.css\";\n\nconst Square = ({ value, onClick, isHighlight }) => {\n  return (\n    isHighlight ?\n      (<button style={{ backgroundColor: \"green\" }} className=\"square\" onClick={() => onClick()}>\n        { value}\n      </button >)\n\n      :\n\n      (<button className=\"square\" onClick={() => onClick()}>\n        {value}\n      </button>)\n\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport \"../style.css\";\nimport Square from \"./Square\";\n\nconst Board = ({ squares, onClick, highlight }) => {\n\n  // <Helper function>\n  // Helper 1: render square\n  const renderSquare = (i) => {\n    return <Square key={i} value={squares[i]} onClick={() => onClick(i)} isHighlight={highlight[i]} />;\n  };\n  // </Helper function>\n\n  const listSquares = [];\n  for (let i = 0; i < 9; i++) {\n    listSquares.push(renderSquare(i));\n  }\n\n  return (\n    <div className=\"board\">\n      {listSquares}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nconst Moves = ({ history, sortOption, current, onClickItem }) => {\n  const historyTemp = history.slice();\n  historyTemp.sort((a, b) => {\n    if (a.location === -1 || b.location === -1)\n      return 0;\n\n    if (a.location > b.location)\n      return 1 * sortOption;\n\n    if (a.location < b.location)\n      return -1 * sortOption;\n\n    return 0;\n  });\n\n  const listMoves = historyTemp.map((step, move) => {\n    const { location, turn } = step;\n    const _step = step.step;\n\n    const\n      desc = move\n        ? `Go to move #${_step}, location: (${~~(location / 3) + 1}, ${location % 3 + 1}), player: ${turn}`\n        : \"Go to game start\";\n    return (\n\n      _step !== current ?\n        <li key={_step}>\n          <button onClick={() => onClickItem(_step)}>{desc}</button>\n        </li>\n        :\n        <li key={_step}>\n          <button onClick={() => onClickItem(_step)} style={{ backgroundColor: \"green\" }}>{desc}</button>\n        </li>\n    );\n  });\n\n  return <ol> {listMoves} </ol>;\n}\n\n\nexport default Moves;","import React, { useState } from \"react\";\nimport FLAGSORT from \"../Resource/FLAGSORT\";\nimport \"../style.css\";\nimport Board from \"./Board\";\nimport Moves from \"./Moves\";\n\n// <function helper>\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  let isDraw = true;\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], lines: lines[i] };\n    }\n\n    isDraw = squares[a] && squares[b] && squares[c] && isDraw;\n  }\n\n  return isDraw;\n};\n// </function helper>\n\nconst Game = () => {\n  const [history, setHistory] = useState([\n    { squares: Array(9).fill(null), location: -1, turn: \"X\", step: 0 },\n  ]);\n  const [highlight, setHighlight] = useState(Array(9).fill(false));\n  const [current, setCurrent] = useState(0);\n  const [sortOption, setSortOption] = useState(FLAGSORT.DEFAULT);\n\n  const [isXTurn, setIsXTurn] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [status, setStatus] = useState(\"Next player: X\");\n\n  // <Helper function>\n\n  // Helper 1: Handle click square\n  const handleClick = (i) => {\n    console.log(`Current: ${current}`);\n    //check winner\n    if (winner) {\n      alert(\"Choose new game\");\n      return;\n    }\n\n    let historyTemp = [];\n    if (current !== history.length - 1) {\n      historyTemp = history.slice(0, current + 1);\n    }\n    else {\n      historyTemp = history.slice();\n    }\n\n    //clone history & squares\n    const squaresTemp = historyTemp[current].squares.slice();\n\n    //change value state squares if possbile\n    if (!squaresTemp[i]) {\n      isXTurn ? (squaresTemp[i] = \"X\") : (squaresTemp[i] = \"O\");\n\n      //calculate winner\n      const winPlayer = calculateWinner(squaresTemp);\n\n      const newHighlight = Array(9).fill(false);\n      //update state isXTurn, history, winner, status\n      setIsXTurn(!isXTurn);\n      setHistory(\n        historyTemp.concat([\n          {\n            squares: squaresTemp,\n            location: i,\n            turn: isXTurn ? \"X\" : \"O\",\n            step: current + 1\n          }\n        ])\n      );\n      setCurrent(historyTemp.length);\n      setWinner(winPlayer);\n      if (winPlayer) {\n        if (winPlayer !== true) {\n          setStatus(`Winner: ${winPlayer.winner}`);\n\n          newHighlight[winPlayer.lines[0]] = true;\n          newHighlight[winPlayer.lines[1]] = true;\n          newHighlight[winPlayer.lines[2]] = true;\n        } else {\n          setStatus(`Draw`);\n        }\n      }\n      else {\n        setStatus(`Next player: ${isXTurn ? \"O\" : \"X\"}`);\n        newHighlight[i] = true;\n      }\n\n      setHighlight(newHighlight);\n    } else {\n      //alert error\n      alert(`Square ${i} already has a value!!`);\n    }\n  };\n\n  // Helper 2: create new game\n  const newGame = () => {\n    alert(`New Game?`);\n    setHistory([{ squares: Array(9).fill(null), location: -1, turn: \"X\", step: 0 }]);\n    setHighlight(Array(9).fill(false));\n    setIsXTurn(true);\n    setWinner(null);\n    setCurrent(0);\n    setStatus(\"Next player: X\");\n  };\n\n  // Helper 3: jump\n  const jumpTo = (move) => {\n    const newHighlight = Array(9).fill(false);\n    newHighlight[history[move].location] = true;\n    setHighlight(newHighlight);\n\n    setCurrent(move);\n    setIsXTurn(move % 2 === 0);\n    setStatus(`Next player: ${move % 2 === 0 ? \"X\" : \"O\"}`);\n  };\n\n  const handleClickSort = () => {\n    switch (sortOption) {\n      case FLAGSORT.DEFAULT:\n        setSortOption(FLAGSORT.ACENDING);\n        break;\n      case FLAGSORT.ACENDING:\n        setSortOption(FLAGSORT.DECENDING);\n        break;\n      case FLAGSORT.DECENDING:\n        setSortOption(FLAGSORT.DEFAULT);\n        break;\n      default: break;\n    }\n  }\n  // </Helper function>\n\n  const sortTag = ['DECENDING', 'None', 'ACENDING'];\n  const colorSortTag = ['green', 'white', 'yellow'];\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board onClick={handleClick} squares={history[current].squares} highlight={highlight} />\n      </div>\n      <div className=\"game-info\">\n        <div className=\"status\">\n          <div>{status}</div>\n          <div>\n            <span>Sort:</span>\n            <button style={{ backgroundColor: `${colorSortTag[sortOption + 1]}` }} onClick={() => { handleClickSort() }}>{sortTag[sortOption + 1]}</button>\n          </div>\n          <br />\n          <div>{winner ? <button onClick={() => newGame()}>New Game</button> : \"\"}</div>\n        </div>\n\n        <Moves history={history} sortOption={sortOption} current={current} onClickItem={jumpTo} />\n      </div>\n    </div>\n  );\n};\n\nexport default Game;","import React from \"react\";\n\nimport Game from \"./Components/Game\";\n\nconst App = () => {\n  return <Game />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}