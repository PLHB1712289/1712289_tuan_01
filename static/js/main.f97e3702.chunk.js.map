{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/Game.js","App.js","index.js"],"names":["Square","value","onClick","className","Board","useState","Array","fill","squares","setSquares","isXTurn","setIsXTurn","winner","setWinner","status","setStatus","handleClick","i","alert","squaresTemp","slice","winPlayer","lines","length","a","b","c","calculateWinner","renderSquare","Game","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAWeA,EARA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvB,OACE,4BAAQC,UAAU,SAASD,QAAS,kBAAMA,MACvCD,ICoGQG,EA9ED,WAAM,MAEYC,mBAASC,MAAM,GAAGC,KAAK,OAFnC,mBAEXC,EAFW,KAEFC,EAFE,OAGYJ,oBAAS,GAHrB,mBAGXK,EAHW,KAGFC,EAHE,OAIUN,mBAAS,MAJnB,mBAIXO,EAJW,KAIHC,EAJG,OAKUR,mBAAS,kBALnB,mBAKXS,EALW,KAKHC,EALG,KASZC,EAAc,SAACC,GAEnB,GAAIL,EACFM,MAAM,uBADR,CAMA,IAAMC,EAAcX,EAAQY,QAG5B,GAAKD,EAAYF,GAefC,MAAM,UAAD,OAAWD,EAAX,+BAfc,CACRE,EAAYF,GAAvBP,EAA4B,IAAyB,IAGrD,IAAMW,EA/CY,SAACb,GAYvB,IAXA,IAAMc,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAL,EAAI,EAAGA,EAAIK,EAAMC,OAAQN,IAAK,CAAC,IAAD,cACnBK,EAAML,GADa,GAC9BO,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIlB,EAAQgB,IAAMhB,EAAQgB,KAAOhB,EAAQiB,IAAMjB,EAAQgB,KAAOhB,EAAQkB,GACpE,OAAOlB,EAAQgB,GAInB,OAAO,KA4BeG,CAAgBR,GAGlCR,GAAYD,GACZD,EAAWU,GACXN,EAAUQ,GAENN,EADJM,EACc,WAAD,OAAYA,GACX,gBAAD,OAAiBX,EAAU,IAAM,SAiB5CkB,EAAe,SAACX,GACpB,OAAO,kBAAC,EAAD,CAAQhB,MAAOO,EAAQS,GAAIf,QAAS,kBAAMc,EAAYC,OAI/D,OACE,6BACGL,EAAS,4BAAQV,QAAS,kBAf7BgB,MAAM,aACNT,EAAWH,MAAM,GAAGC,KAAK,OACzBI,GAAW,GACXE,EAAU,WACVE,EAAU,oBAWE,YAAsD,GAChE,yBAAKZ,UAAU,UAAUW,GAEzB,yBAAKX,UAAU,aACZyB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKzB,UAAU,aACZyB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKzB,UAAU,aACZyB,EAAa,GACbA,EAAa,GACbA,EAAa,MC5FPC,EAJF,WACX,OAAO,kBAAC,EAAD,OCIMC,EAJH,WACV,OAAO,kBAAC,EAAD,OCDTC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f97e3702.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nconst Square = ({ value, onClick }) => {\n  return (\n    <button className=\"square\" onClick={() => onClick()}>\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport Square from \"./Square\";\n\n// <function helper>\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n};\n// </function helper>\n\nconst Board = () => {\n  // State\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXTurn, setIsXTurn] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [status, setStatus] = useState(\"Next player: X\");\n\n  // <Helper function>\n  // Helper 1: Handle click square\n  const handleClick = (i) => {\n    //check winner\n    if (winner) {\n      alert(\"Choose new game\");\n      return;\n    }\n\n    //clone squares\n    const squaresTemp = squares.slice();\n\n    //change value state squares if possbile\n    if (!squaresTemp[i]) {\n      isXTurn ? (squaresTemp[i] = \"X\") : (squaresTemp[i] = \"O\");\n\n      //calculate winner\n      const winPlayer = calculateWinner(squaresTemp);\n\n      //update state isXTurn, squares, winner, status\n      setIsXTurn(!isXTurn);\n      setSquares(squaresTemp);\n      setWinner(winPlayer);\n      winPlayer\n        ? setStatus(`Winner: ${winPlayer}`)\n        : setStatus(`Next player: ${isXTurn ? \"O\" : \"X\"}`);\n    } else {\n      //alert error\n      alert(`Square ${i} already has a value!!`);\n    }\n  };\n\n  // Helper 2: create new game\n  const newGame = () => {\n    alert(`New Game?`);\n    setSquares(Array(9).fill(null));\n    setIsXTurn(true);\n    setWinner(null);\n    setStatus(\"Next player: X\");\n  };\n\n  // Helper 3: render square\n  const renderSquare = (i) => {\n    return <Square value={squares[i]} onClick={() => handleClick(i)} />;\n  };\n  // </Helper function>\n\n  return (\n    <div>\n      {winner ? <button onClick={() => newGame()}>New Game</button> : \"\"}\n      <div className=\"status\">{status}</div>\n\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nimport Board from \"./Board\";\n\nconst Game = () => {\n  return <Board />;\n};\n\nexport default Game;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Game from \"./Components/Game\";\n\nconst App = () => {\n  return <Game />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}